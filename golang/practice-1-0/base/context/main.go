package main

// Задание 1
// Создай `ctx := context.Background()` и выведи `"alive"`.

// Задание 2
// Создай `ctx, cancel := context.WithCancel(...)`.
// Через 2 секунды вызови `cancel()`, слушай `<-ctx.Done()` и выведи `"cancelled"`.

// Задание 3
// Создай `context.WithTimeout(...)` на 1 секунду.
// В горутине слушай `<-ctx.Done()` и напечатай `ctx.Err()`.

// Задание 4
// Сделай `select` с каналом `jobCh` и `ctx.Done()`: если контекст отменён — выход.

// Задание 5
// Реализуй воркер, который каждые 300ms печатает `"work"`, но выходит по `ctx.Done()`.

// Задание 6
// Передай `context.WithTimeout(...)` в функцию.
// Внутри — слушай `ctx.Done()` и сообщай о завершении.

// Задание 7
// Создай родительский контекст с `WithCancel`,
// дочерний с `WithTimeout`. Отмени родительский — проверь,
// что `ctx.Err()` у потомка тоже `canceled`.

// Задание 8
// Создай `ctx := context.TODO()` и вызови `ctx.Err()`. Что вернётся?

// Задание 9
// Имплементируй `gracefulShutdown`: по сигналу из
// канала отменяй контекст, все воркеры завершаются через `ctx`.

// Задание 10
// Создай `ctx, cancel := context.WithTimeout(...)`,
// но забудь вызвать `cancel()`. Что произойдёт?

// Задание 11
// Передай `ctx` в `http.Request` (или фейковую функцию),
// извлеки `ctx.Value("trace_id")`.

// Задание 12
// Создай цепочку из трёх контекстов: `root → child → grandchild`.
// Отмени child — проверь, кто завершится.

// Задание 13
// Сделай `mapProcessor(ctx)` — читает из канала `chan map[string]int`,
// но выходит при `ctx.Done()`.

// Задание 14
// Реализуй очередь задач: каждую обрабатывает воркер
// с ограничением по времени (`WithTimeout` на 200ms).

// Задание 15
// Сделай `select` между каналом результата и `ctx.Done()`.
// Выводи `"timeout"` если истекает `ctx`.

// Задание 16
// Сделай `context.WithDeadline(...)`, передай в `goroutine`,
// замерь `ctx.Err()` после истечения времени.

// Задание 17
// Создай несколько воркеров, каждый принимает `ctx` и
// выходит по `ctx.Done()`. Управляй всеми сразу.

// Задание 18
// Обработай ошибку `ctx.Err()` в логике:
// если `deadline exceeded` — одно сообщение,
// если `canceled` — другое.

// Задание 19
// Передай `traceID` в контекст через `context.WithValue`,
// достань в другой функции и выведи.

// Задание 20
// Интегрируй `ctx` в пайплайн: генератор → обработчик → логер.
// Все части выходят по отмене.
