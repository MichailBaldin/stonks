package main


// Задание 1: Установка значения int через указатель
// Создай функцию `SetTo100(x any)`, которая устанавливает значение переменной `*int` в `100` с помощью reflection.


// Задание 2: Вызов метода без аргументов
// Создай структуру `Greeter` с методом `Hello()`, вызови его через `MethodByName().Call(nil)`.


// Задание 3: Вызов метода с аргументом
// У структуры `Speaker` есть метод `Say(msg string)`. Вызови его через reflection с фразой `"Hi!"`.


// Задание 4: Получение значения тега `json`
// У структуры `User` поле `Name` имеет тег `` `json:"name"` ``. Получи и выведи тег.


// Задание 5: Изменение значения поля по имени
// Функция `SetField(x any, name string, val any)` должна найти поле по имени и изменить его, если можно.


// Задание 6: Изменение всех полей на zero-value
// Функция `ResetStruct(x any)` должна обнулить все поля структуры.


// Задание 7: Создание нового int через `reflect.New`
// Создай `reflect.New(reflect.TypeOf(0))`, установи значение `55`, выведи как `int`.


// Задание 8: Создание структуры `User` через reflection
// Создай `reflect.New(TypeOf(User{})).Elem()`, установи поля `Name` и `Age`.


// Задание 9: Создание слайса int и добавление значений
// Сделай `MakeSlice`, добавь туда `1`, `2`, `3` через `Append`.


// Задание 10: Вызов функции `double(x int) int`
// Создай `double := func(x int) int { return x * 2 }`, вызови через `reflect.ValueOf(...).Call(...)`.


// Задание 11: Проверка наличия метода по имени
// Функция `HasMethod(obj any, name string) bool` — возвращает true, если метод существует.


// Задание 12: Вызов метода, если он есть
// Функция `CallIfExists(obj any, name string)` вызывает метод без аргументов, если найден.


// Задание 13: Получение списка всех методов типа
// Пройди `t.NumMethod()` и выведи все `t.Method(i).Name`.


// Задание 14: Создание map\[K]V через reflection
// Создай map[string]int, добавь пару `"x" → 42`.


// Задание 15: Обход и изменение всех string-полей
// Если поле типа `string`, установи `"default"`.


// Задание 16: Вызов метода с несколькими аргументами
// У метода `Sum(a, b int) int` вызови через `Call([]reflect.Value{...})`.


// Задание 17: Получение и установка значений приватных полей (через unsafe — необязательно)
// Изучи, как `reflect` запрещает работать с неэкспортируемыми полями (внутри пакета).


// Задание 18: Получение имени типа поля
// У структуры `User`, пройди `.Field(i).Type.Name()` для каждого поля.


// Задание 19: Обработка вложенных структур
// У структуры с полем `Profile struct { Email string }` получи и выведи значение `Email`.


// Задание 20: Универсальный `DumpStruct(x any)`
// Выведи все поля, теги, типы, значения, методы (если есть).

