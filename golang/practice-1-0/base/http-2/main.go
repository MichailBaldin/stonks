package main

import (
	"log"
	"net/http"
)

// 1. Сделай HTTP-сервер на net/http,
// который на /version отвечает строкой "v1.0.0".
func main() {
	mux := http.NewServeMux()
	mux.HandleFunc("/version", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("v1.0.0\n"))
	})
	log.Fatal(http.ListenAndServe(":8080", mux))
}

// 2. На запрос GET /user?id=123 сервер должен вернуть "User ID: 123".

// 3. Реализуй обработчик POST /copy, который читает тело запроса и возвращает его с префиксом "Copy: ".

// 4. Сделай сервер, который возвращает JSON: { "service": "running" } на /health.

// 5. На роут /method выводи название HTTP метода запроса (GET, POST, PUT и т.д.).

// 6. На запрос GET /subtract?a=10&b=3 верни разность двух чисел в теле ответа.

// 7. На POST /data прими JSON вида { "name": "Alice", "age": 25 }, верни { "message": "Hello Alice, you are 25" }.

// 8. Сделай эндпоинт `GET /time`, который возвращает текущее время в формате "2006-01-02 15:04:05".

// 9. На `GET /square?n=4` верни квадрат числа n в формате `"16"`.

// 10. Реализуй `POST /reverse`, который читает строку из тела запроса и возвращает её в обратном порядке.

// 11. На `GET /random` верни случайное число от 1 до 100.

// 12. Сделай `GET /greet?name=Alice&lang=en`, который возвращает приветствие: "Hello, Alice!" для en, "Привет, Alice!" для ru.

// 13. На `POST /count` прими текст в теле запроса и верни количество слов в нём.

// 14. Реализуй `GET /multiply?a=3&b=7`, который возвращает произведение двух чисел.

// 15. Сделай `POST /uppercase`, который читает строку и возвращает её в верхнем регистре.

// 16. На `GET /length?text=hello` верни длину строки.

// 17. Реализуй `POST /contains`, который принимает JSON `{"text": "hello world", "search": "world"}` и возвращает `{"found": true}`.

// 18. Сделай `GET /divide?a=10&b=2`, который возвращает результат деления или ошибку при делении на ноль.

// 19. На `POST /split` прими JSON `{"text": "a,b,c", "separator": ","}` и верни массив строк `["a", "b", "c"]`.

// 20. Реализуй `GET /power?base=2&exp=3`, который возвращает base в степени exp.

// 21. Сделай `POST /max`, который принимает массив чисел `{"numbers": [1, 5, 3, 9, 2]}` и возвращает максимальное `{"max": 9}`.

// 22. На `GET /factorial?n=5` верни факториал числа n.

// 23. Реализуй `POST /palindrome`, который проверяет, является ли строка палиндромом, и возвращает `{"isPalindrome": true}`.

// 24. Сделай `GET /fibonacci?n=7`, который возвращает n-е число Фибоначчи.

// 25. На `POST /sort` прими массив чисел и верни их в отсортированном порядке.

// 26. Реализуй `GET /age?year=1990`, который возвращает возраст человека, родившегося в указанном году.

// 27. Сделай `POST /filter`, который принимает `{"numbers": [1,2,3,4,5], "min": 3}` и возвращает числа >= min.

// 28. На `GET /even?n=10` верни "true", если число чётное, иначе "false".

// 29. Реализуй `POST /sum`, который принимает массив чисел и возвращает их сумму.

// 30. Сделай `GET /prime?n=17`, который проверяет, является ли число простым.

// 31. На `POST /unique` прими массив строк и верни только уникальные элементы.

// 32. Реализуй `GET /gcd?a=48&b=18`, который возвращает наибольший общий делитель.

// 33. Сделай `POST /anagram`, который проверяет, являются ли две строки анаграммами: `{"word1": "listen", "word2": "silent"}`.

// 34. На `GET /binary?n=10` верни двоичное представление числа.

// 35. Реализуй `POST /avg`, который принимает массив чисел и возвращает среднее арифметическое.

// 36. Сделай `GET /abs?n=-5`, который возвращает абсолютное значение числа.

// 37. На `POST /frequency` прими строку и верни частоту каждого символа в JSON формате.

// 38. Реализуй `GET /lcm?a=4&b=6`, который возвращает наименьшее общее кратное.

// 39. Сделай `POST /vowels`, который подсчитывает количество гласных в строке.

// 40. На `GET /celsius?f=100` преобразуй температуру из Fahrenheit в Celsius.

// 41. Реализуй `POST /replace`, который принимает `{"text": "hello world", "old": "world", "new": "Go"}` и заменяет подстроку.

// 42. Сделай `GET /digit-sum?n=123`, который возвращает сумму цифр числа.

// 43. На `POST /trim` прими строку и верни её без пробелов в начале и конце.

// 44. Реализуй `GET /leap?year=2024`, который проверяет, является ли год високосным.

// 45. Сделай `POST /intersection`, который находит пересечение двух массивов: `{"arr1": [1,2,3], "arr2": [2,3,4]}`.

// 46. На `GET /roman?n=42` верни римскую запись числа.

// 47. Реализуй `POST /median`, который находит медиану массива чисел.

// 48. Сделай `GET /distance?x1=0&y1=0&x2=3&y2=4`, который возвращает расстояние между двумя точками.

// 49. На `POST /base64` закодируй строку в base64.

// 50. Реализуй `GET /permutations?text=abc`, который возвращает количество возможных перестановок символов.
