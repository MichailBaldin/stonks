package main

// 1. Напиши HTTP-сервер на `net/http`, который на `/ping` отвечает строкой `"pong"`.

// 2. На запрос `GET /hello?name=Bob` сервер должен вернуть `"Hello, Bob!"`.

// 3. Сделай обработчик `POST /echo`, который читает тело запроса и возвращает его обратно.

// 4. Реализуй сервер, который возвращает JSON: `{ "status": "ok" }` на `/status`.

// 5. Сделай роут `/headers`, который выводит все заголовки запроса в текстовом виде.

// 6. На запрос `GET /add?a=3&b=5` верни сумму двух чисел в теле ответа.

// 7. На `POST /json` прими JSON вида `{ "x": 1, "y": 2 }`, верни `{ "sum": 3 }`.

// 8. Реализуй middleware, который логирует метод и путь каждого запроса перед вызовом handler.

// 9. Добавь middleware, который устанавливает заголовок `X-Server: Go`.

// 10. На `GET /user/{id}` (например, `/user/123`) верни `User ID: 123`. Без внешних роутеров.

// 11. На `GET /cookie` установи cookie `session=abc123` в ответе.

// 12. На `GET /check` проверь наличие cookie `session`, верни `OK` или `No cookie`.

// 13. На `POST /upload` прими файл из формы `multipart/form-data` и верни его размер.

// 14. Сделай сервер, который отдаёт файл `index.html` из текущей директории на `/static`.

// 15. Ограничь доступ к `/admin` — если нет заголовка `X-Token: 123`, возвращай 403.

// 16. Добавь CORS-заголовки для всех запросов: `Access-Control-Allow-Origin: *`.

// 17. Реализуй `GET /delay`, который ждёт 2 секунды перед ответом (имитация задержки).

// 18. На `GET /redirect` сделай редирект на `/final`.

// 19. Добавь обработку только методов `GET` и `POST`, остальные — `405 Method Not Allowed`.

// 20. Реализуй graceful shutdown сервера по Ctrl+C: дождись завершения активных запросов.
