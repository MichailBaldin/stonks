package main

// Задание 1: Реализация интерфейса
// Условие:
// Создай интерфейс `Speaker` с методом `Speak() string`.
// Создай тип `Cat` и метод `Speak()` → `"Meow"`.
// Создай `func Talk(s Speaker)` и передай туда `Cat{}`.

// Задание 2: Интерфейсная переменная
// Условие:
// Создай переменную `var s Speaker`
// Присвой ей `Dog{}` с методом `Speak() string → "Bark"`
// Вызови `s.Speak()` — что будет?

// Задание 3: Проверка реализации интерфейса
// Условие:
// Добавь строку:
// var _ Speaker = (*Dog)(nil)
// Компилируется ли, если метод у `*Dog`, а ты передаёшь `Dog{}`?

// Задание 4: Указатель реализует интерфейс
// Условие:
// Создай метод `Serve()` у `*Server`.
// Объяви интерфейс `HTTPHandler` с методом `Serve()`.
// Проверь:
// var h HTTPHandler = &Server{} // ✅
// var h2 HTTPHandler = Server{} // ❌

// Задание 5: Пустой интерфейс и type assertion
// Условие:
// Создай `var val interface{} = "hello"`
// Используй type assertion, чтобы извлечь строку.
// Что будет, если попытаться извлечь как `int`?

// Задание 6: Type switch
// Условие:
// Создай `printType(v interface{})`, используй `switch v := v.(type)`
// Передай туда строку, int, bool.
// Выведи текст: `"Это строка"`, `"Это число"` и т.д.

// Задание 7: Интерфейс как параметр
// Условие:
// Создай интерфейс `Describer` с методом `Describe() string`.
// Реализуй его на `User{Name, Age}`
// Напиши функцию `PrintInfo(d Describer)`, вызывающую `Describe()`

// Задание 8: Интерфейс как возвращаемое значение
// Условие:
// Создай функцию `func NewSpeaker(name string) Speaker`,
// которая возвращает структуру `Robot{name string}`.
// Метод `Speak()` должен возвращать `"Beep <name>"`.

// Задание 9: Комбинированные интерфейсы
// Условие:
// Создай два интерфейса: `Reader`, `Writer`
// Объяви `ReadWriter`, объединяющий их.
// Создай `MockDevice` с методами `Read([]byte)` и `Write([]byte)`,
// убедись, что он реализует `ReadWriter`.

// Задание 10: Интерфейс в срезе
// Условие:
// Создай срез `[]Speaker`, добавь в него `Cat{}`, `Dog{}`, `Robot{}`.
// В цикле вызывай `s.Speak()` и печатай результат.
