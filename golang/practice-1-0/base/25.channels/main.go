package main

// Задание 1
// Создай `chan int`, отправь в него число из горутины и получи его в `main()`.

// Задание 2
// Сделай буферизированный канал на 2 элемента.
// Отправь 2 значения **без использования горутин**. Получи их.

// Задание 3
// Запусти горутину, которая отправляет `"ping"`
// в канал через `time.Sleep(1s)`. Получи и выведи в `main()`.

// Задание 4
// Создай структуру `User{Name string}`. Отправь
// несколько `User` в канал, распечатай `Name` каждого.

// Задание 5
// Сделай `chan<- string` — канал только для отправки.
// Отправляй в него из функции `send()`. Получай в `main()`.

// Задание 6
// Сделай `<-chan int` — канал только для чтения.
// Запускай `read(ch)` с такой сигнатурой.

// Задание 7
// Создай горутину, которая принимает `[]int` и
// поэлементно отправляет числа в канал. В `main()` — собирай их обратно в срез.

// Задание 8
// Используй `close(chan)` — заполни канал числами от 1 до 5,
// закрой канал. Пройдись `for val := range ch`.

// Задание 9
// Попробуй дважды закрыть канал. Поймай панику
// через `recover()` и напечатай `"ошибка закрытия"`.

// Задание 10
// Сделай горутину, которая отправляет в канал,
// но `main()` не получает. Что происходит?

// Задание 11
// Сделай наоборот: `main()` ждёт из канала,
// но никто не отправляет. Что будет?

// Задание 12
// Создай 2 горутины, каждая отправляет в один канал.
// В `main()` получай их по `range`.

// Задание 13
// Сделай фан-аут: 1 продюсер, 3 воркера читают
// один канал и обрабатывают строку.

// Задание 14
// Сделай фан-ин: 3 источника (канала), один
// `merge`-канал. Чтение идёт в `main()`.

// Задание 15
// Отправь в канал указатель на структуру, измени поле
// в `main()` — проверь, что это тот же объект.

// Задание 16
// Передавай значения интерфейса `Shape` через канал.
// Один `Circle`, один `Rect`. В `main()` — тип-ассерт.

// Задание 17
// Пусть горутина пишет в канал `map[string]int`,
// а `main()` получает и выводит ключи.

// Задание 18
// Реализуй пайплайн:
// 1. `generate(n)` — отправляет 0..n
// 2. `square()` — возводит в квадрат
// 3. `print()` — печатает
// Каждая стадия — отдельная горутина + канал.

// Задание 19
// Сделай `done := make(chan struct{})`. После всех
// операций отправь `struct{}{}` в него. В `main()` жди через `<-done`.

// Задание 20
// Сделай `chan error`. Если в горутине возникает
// ошибка — отправляй её туда. В `main()` — проверяй и логируй.
