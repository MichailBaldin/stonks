package main

// 1. Используя `strings.NewReader`, создай `io.Reader` по строке `"hello\n"`
// и выведи её на `os.Stdout` через `io.Copy`.

// 2. Прочитай вручную `[]byte` из `strings.NewReader("abc")` по 2 байта за раз
// и выведи каждый кусок.

// 3. Используя `bytes.Buffer`, создай `Writer`, запиши туда строку `"GoLang"`,
// затем выведи результат.

// 4. Создай `io.TeeReader`, который дублирует данные из `strings.NewReader("debug")`
// в `bytes.Buffer`. Прочитай всё и выведи содержимое буфера.

// 5. Создай `io.LimitReader` на 4 байта из `strings.NewReader("abcdefg")`,
// прочитай и выведи результат.

// 6. Объедини два `strings.Reader` со строками `"foo"` и `"bar"` в один `io.MultiReader`,
// прочитай и выведи результат.

// 7. Используя `io.MultiWriter`, сделай запись одновременно в `bytes.Buffer` и `bytes.Buffer`.
// Запиши строку `"parallel"`, выведи содержимое обоих.

// 8. С помощью `io.CopyN` скопируй ровно 3 байта из `strings.NewReader("abcdef")`
// в `bytes.Buffer`, выведи результат.

// 9. Создай `io.Pipe()`, в одной горутине пиши строку `"streaming"` в Writer,
// в другой читай Reader и выведи всё.

// 10. Используй `io.ReadFull`, чтобы прочитать ровно 5 байт из `strings.NewReader("12345")`
// в `[]byte` и выведи содержимое.

// 11. Используй `io.ReadAtLeast`, чтобы прочитать минимум 4 байта
// из `strings.NewReader("hello")` в буфер и выведи результат.

// 12. Создай `bytes.NewReader` по строке `"abcdefghij"`, затем через `io.NewSectionReader`
// выдели под-ридер с offset 2 и length 4. Прочитай и выведи.

// 13. Создай `strings.NewReader("abc")`, передай его в `io.ReadAll`, выведи результат.

// 14. Используй `io.CopyBuffer` для копирования из `strings.NewReader("buffered")`
// в `bytes.Buffer` с заранее созданным буфером на 4 байта.

// 15. Используя `strings.NewReader("123456")`, последовательно вызывай `Read([]byte{...})`
// по 2 байта до конца, выводи содержимое каждого чтения.

// 16. Создай `bytes.Buffer` как `Writer`, используй `Write([]byte)` чтобы вручную записать
// `"XYZ"`, затем прочитай `.Bytes()` и выведи.

// 17. Реализуй свою структуру, которая удовлетворяет интерфейсу `io.Writer`,
// и просто логирует длину каждой записи. Протестируй её с `io.Copy`.

// 18. Реализуй свою структуру, которая удовлетворяет `io.Reader` и возвращает
// бесконечный поток байтов `A`. Считай первые 10 байт и выведи.

// 19. Используя `io.NopCloser`, оберни `strings.NewReader("read only")`,
// и вызови `Close()`, даже если он ничего не делает.

// 20. Напиши функцию `func PrefixReader(r io.Reader, prefix string) io.Reader`, которая
// добавляет префикс перед чтением (например, `"log: "` перед остальным),
// и протестируй через `io.ReadAll`.
