package main

// Задание 1: Первая горутина
// Напиши программу, которая запускает goroutine, печатающую `"Привет из горутины"`.
// Убедись, что `main()` не завершится раньше.

// Задание 2: Запуск нескольких горутин
// Создай цикл, запускающий 5 горутин,
// каждая из которых печатает свой номер. Передавай `i` правильно.

// Задание 3: Изменение структуры
// Создай структуру `User{Name string}`, передай её по значению
// и по указателю в горутину, которая меняет `Name`. Проверь разницу.

// Задание 4: Работа со слайсом
// Горутина должна изменить слайс `[]int`.
// Передай слайс как аргумент, напечатай до и после.

// Задание 5: Работа с map — без синхронизации
// Запусти 1000 горутин одновременно записывающих в `map[string]int`. Что произойдёт?

// Задание 6: Гонка за переменную
// Создай 1000 горутин, каждая увеличивает `x++`. Запусти, сравни с ожиданием.

// Задание 7: Использование WaitGroup
// Создай 10 горутин с `WaitGroup`, каждая должна напечатать `"Готово"` и завершиться.

// Задание 8: Проблема замыкания переменной
// Запусти 3 горутины в цикле с `for i := 0...`,
// внутри лямбда без аргументов — посмотри, что напечатается. Исправь.
// после go 1.22 проблема исправлена

// Задание 9: Горутина внутри метода структуры
// Создай метод `func (u *User) Greet()` и запусти `go user.Greet()`.

// Задание 10: Изменение внешней переменной
// Запусти горутину, которая меняет глобальную переменную. Проверь результат.

// Задание 11: Горутина, читающая из stdin
// Запусти горутину, которая ожидает ввод с консоли,
// и блокирует `main()` до этого момента.
// решается через канал

// Задание 12: Массив структур и горутины
// Создай массив из 5 структур, запусти горутину для каждой, передавай `u := u`.
// после go 1.22 проблема исправлена

// Задание 13: Микропул воркеров
// Создай 3 воркера-горутины, каждая обрабатывает строку.
// Пока без каналов — просто имитация.

// Задание 14: Сравнение передачи интерфейса и структуры
// Передай `Worker` (интерфейс) и `ConcreteWorker` в горутину, вызови метод.
// Убедись, что всё работает.

// Задание 15: Горутина с `panic`
// Запусти горутину, в которой возникает `panic`. Что произойдёт с `main()`?

// Задание 16: Утечка горутины
// Запусти горутину с `for {}` без `exit`-условия. Что происходит
// при завершении программы?

// Задание 17: Управление временем жизни через `time.Sleep`
// Создай горутину, которая работает 2 секунды.
// В `main()` — `time.Sleep(3 * time.Second)`.

// Задание 18: Объединение `goroutine + слайс`
// Создай 100 горутин, каждая добавляет `i` в слайс.
// Проверь, что всё корректно. Если нет — почему?

// Задание 19: Сравнение `go f()` и `f()`
// Вызови функцию `slowWork()` через `go slowWork()` и просто `slowWork()`.
// Сравни поведение.

// Задание 20: Мини-бенчмарк
// Создай 100 000 пустых горутин и замерь время. Проверь, что Go справляется.
