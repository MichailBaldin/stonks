package main

// import (
//     "database/sql"
//     _ "github.com/lib/pq"
// )

// func main() {
// 	db, err := sql.Open("postgres", "user=username dbname=traindb sslmode=disable")
// }

// Задачи на создание таблиц
// 1. Создай таблицу users с полями: id (serial primary key), name (varchar(100)), email (varchar(100)).
// 2. Создай таблицу products с полями: id (serial), name (text not null), price (decimal(10,2)), created_at (timestamp default now()).
// 3. Создай таблицу orders с полями: id (serial), user_id (integer), total (decimal(10,2)), status (varchar(20) default 'pending').
// 4. Создай таблицу categories с полями: id (serial primary key), name (varchar(50) unique not null), description (text).
// 5. Создай таблицу posts с полями: id (serial), title (varchar(200) not null), content (text), author_id (integer), published_at (timestamp).

// Задачи на вставку данных (CREATE)
// 6. Вставь в таблицу users пользователя с именем "John Doe" и email "john@example.com". Верни ID созданной записи.
// 7. Добавь в таблицу products товар: name="Laptop", price=999.99. Используй RETURNING для получения id и created_at.
// 8. Вставь в categories категорию с name="Electronics" и description="Electronic devices and gadgets".
// 9. Создай функцию, которая принимает слайс пользователей и вставляет их всех за один запрос в таблицу users.
// 10. Вставь заказ в orders для user_id=1 с total=1500.50 и статусом "completed".

// Задачи на чтение данных (READ)
// 11. Получи всех пользователей из таблицы users и выведи их имена и email'ы.
// 12. Найди товар в products по ID и верни его название и цену.
// 13. Получи все заказы со статусом "pending" из таблицы orders, отсортированные по total по убыванию.
// 14. Найди пользователя по email в таблице users. Если не найден, верни ошибку "user not found".
// 15. Получи количество товаров в каждой ценовой категории: до 100, от 100 до 500, свыше 500 из таблицы products.
// 16. Найди все посты автора с ID=2 из таблицы posts, отсортированные по дате публикации.
// 17. Получи топ-5 самых дорогих товаров из products с их названиями и ценами.

// Задачи на обновление данных (UPDATE)
// 18. Обнови email пользователя с ID=1 на "newemail@example.com" в таблице users.
// 19. Увеличь цену всех товаров в products на 10%.
// 20. Измени статус заказа с ID=1 на "shipped" в таблице orders.
// 21. Обнови описание категории "Electronics" на "Modern electronic devices and accessories".
// 22. Установи published_at в текущее время для поста с ID=3 в таблице posts.
// 23. Создай функцию, которая обновляет цену товара по ID и возвращает старую и новую цену.

// Задачи на удаление данных (DELETE)
// 24. Удали пользователя с ID=5 из таблицы users.
// 25. Удали все товары дешевле 50 долларов из products.
// 26. Удали заказы старше 30 дней из таблицы orders (используй created_at если добавишь это поле).
// 27. Удали категорию по названию "Outdated" из categories.

// Задачи на работу с транзакциями
// 28. Создай транзакцию: добавь нового пользователя и сразу создай для него заказ. Если что-то пойдет не так, откати изменения.
// 29. В транзакции обнови цену товара и создай запись об этом изменении в таблице price_history (создай эту таблицу).
// 30. Реализуй перевод денег между пользователями: уменьши баланс одного и увеличь другого в рамках транзакции.

// Задачи на JOIN и связи
// 31. Получи все заказы с именами пользователей (JOIN между orders и users).
// 32. Найди все товары определенной категории, используя связь между products и categories.
// 33. Получи пользователей, которые сделали заказы на сумму больше 1000.

// Задачи на агрегацию и группировку
// 34. Посчитай общую сумму всех заказов для каждого пользователя.
// 35. Найди среднюю цену товаров в каждой категории.
// 36. Получи топ-3 пользователей по количеству заказов.

// Дополнительные задачи
// 37. Создай индекс на поле email в таблице users.
// 38. Реализуй поиск товаров по названию с использованием LIKE и wildcards.
// 39. Создай хранимую процедуру, которая возвращает статистику по заказам за определенный период.
// 40. Реализуй пагинацию для получения товаров (LIMIT и OFFSET).
