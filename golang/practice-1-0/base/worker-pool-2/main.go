package main

// Worker Pool Pattern - Тренажер
// Изучаем горутины, каналы и паттерны параллельного программирования

// 1. Создай простой worker pool: 3 воркера читают числа из канала и выводят их квадрат.

// 2. Сделай worker pool, который обрабатывает строки: переводит в верхний регистр и выводит.

// 3. Реализуй worker pool с функцией отправки задач: `SendTask(task string)`.

// 4. Добавь канал результатов: воркеры отправляют обработанные данные в `results` канал.

// 5. Сделай worker pool с настраиваемым количеством воркеров через параметр `numWorkers`.

// 6. Добавь graceful shutdown: по сигналу закрой входной канал и дождись завершения всех воркеров.

// 7. Реализуй worker pool для HTTP-запросов: воркеры делают GET к переданным URL и возвращают статус.

// 8. Добавь обработку ошибок: если воркер не может обработать задачу, отправь ошибку в отдельный канал.

// 9. Сделай worker pool с таймаутом на задачу: если обработка длится > 5 сек, отмени её.

// 10. Реализуй приоритетный worker pool: задачи с высоким приоритетом обрабатываются первыми.

// 11. Добавь метрики: счётчик обработанных задач, время работы воркеров, количество ошибок.

// 12. Сделай worker pool с rate limiting: не более 10 задач в секунду на воркер.

// 13. Реализуй backpressure: если очередь задач переполнена, блокируй отправку новых.

// 14. Добавь worker pool с retry логикой: если задача упала, повтори её до 3 раз.

// 15. Сделай dynamic worker pool: увеличивай/уменьшай количество воркеров по нагрузке.

// 16. Реализуй worker pool с батчингом: воркеры обрабатывают задачи группами по 5 штук.

// 17. Добавь circuit breaker: если много ошибок, временно останови отправку задач.

// 18. Сделай worker pool с персистентной очередью: задачи сохраняются в файл при shutdown.

// 19. Реализуй multi-stage pipeline: несколько worker pool'ов последовательно обрабатывают данные.

// 20. Создай универсальный worker pool framework с конфигурацией через struct и интерфейсами.

// Пример структуры для задания:
/*
type Task struct {
    ID       int
    Data     interface{}
    Priority int
}

type Result struct {
    TaskID int
    Data   interface{}
    Error  error
}

type WorkerPool struct {
    numWorkers  int
    taskChan    chan Task
    resultChan  chan Result
    quit        chan bool
}
*/
// Начни с первого задания и постепенно усложняй!
