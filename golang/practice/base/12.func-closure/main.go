package main

// Задание 1: Простая функция
// Условие:
// Создай функцию `square(n int) int`, которая возвращает квадрат числа.

// Задание 2: Множественный возврат
// Условие:
// Напиши функцию `split(n int) (int, int)`, которая делит `n`
// пополам и возвращает две половины (без остатка).

// Задание 3: Вариативные аргументы
// Условие:
// Создай функцию `sum(nums ...int) int`, которая возвращает
// сумму всех аргументов.

// Задание 4: Анонимная функция (вызов сразу)
// Условие:
// Вызови анонимную функцию, которая печатает
// "Hello from anonymous function".

// Задание 5: Функция как значение
// Условие:
// Сохрани в переменную функцию, которая удваивает число,
// и вызови её для `4`.

// Задание 6: Замыкание-счётчик
// Условие:
// Напиши функцию `makeCounter() func() int`,
// которая возвращает замыкание, увеличивающее внутренний
// счётчик. Покажи, что вызов `c := makeCounter()` возвращает
// функцию, и `c()` каждый раз даёт `1, 2, 3`.

// Задание 7: Замыкание с аргументом
// Условие:
// Реализуй `makeAdder(base int) func(int) int`, возвращающую функцию, которая прибавляет `base` к любому числу.
// add10 := makeAdder(10)
// add20 := makeAdder(20)
// fmt.Println(add10(5)) // 15
// fmt.Println(add20(5)) // 25

// Задание 8: Возврат функции, возвращающей указатель
// Условие:
// Напиши `makePointerGenerator() func() *int`, возвращающую замыкание, которое увеличивает внутреннюю переменную `x` и возвращает указатель на неё.
// Подсказка:
// func makePointerGenerator() func() *int {
//     x := 0
//     return func() *int {
//         x++
//         return &x
//     }
// }

// Задание 9: Функция, принимающая другую функцию
// Условие:
// Создай `applyTwice(f func(int) int, x int) int`, которая вызывает `f(f(x))`.
// double := func(x int) int { return x * 2 }
// fmt.Println(applyTwice(double, 3)) // 12

// Задание 10: Коллекция функций
// Условие:
// Создай срез `[]func() int`, где каждая функция возвращает свой номер (0, 1, 2).
// Выведи результат всех вызовов. Объясни, что будет, если сделаешь цикл с замыканием в лоб.
