package main

// Задание 1
// Создай переменную `counter int` и инкрементируй её из 5 горутин с `mutex`.


// Задание 2
// Оберни `counter` в структуру `Counter`, добавь методы `Inc()` 
// и `Value()`, используй `sync.Mutex`.


// Задание 3
// Добавь `WaitGroup`, чтобы дождаться завершения всех горутин из задачи 2.


// Задание 4
// Переделай `Counter`, чтобы внутри был слайс `[]int`, 
// и каждый инкремент добавлял значение `1`. Защити его `mutex`.


// Задание 5
// Сделай структуру `SafeMap`, в которой хранятся `map[string]int`. 
// Добавь `Set`, `Get`, `Delete` с `mutex`.


// Задание 6
// Имплементируй `RWMutex` в `SafeMap`, чтобы `Get` был неблокирующим, 
// а `Set` и `Delete` — эксклюзивными.


// Задание 7
// Создай воркер-пул: 3 горутины читают из канала `jobs`, 
// увеличивают счётчик защищённый `mutex`, отправляют в `results`.


// Задание 8
// Сделай конкурентную запись в `map[int]int` без `mutex`, 
// запусти 10k итераций — получи `fatal error: concurrent map writes`.


// Задание 9
// Исправь задание 8: оберни `map` в структуру и защити `mutex`.


// Задание 10
// Симулируй гонку: две горутины инкрементируют общий `x` 
// без `mutex`. Покажи расхождение с ожиданием.


// Задание 11
// Создай структуру `BankAccount` с полем `Balance`. 
// Сделай `Deposit(amount)` и `Withdraw(amount)`. Добавь `mutex`.


// Задание 12
// Добавь в `BankAccount` метод `Transfer(to *BankAccount, 
// amount int)`, учитывая оба `mutex`. Избеги дедлока.


// Задание 13
// Реализуй `SafeLogger`, который записывает строки в `[]string`. 
// Защити `append()` `mutex`.


// Задание 14
// Сделай `Inventory` — структура с `map[string]int`. 
// Добавь методы `AddItem(name, count)` и `UseItem(name)` с блокировкой.


// Задание 15
// Создай `StatsCollector`, принимающий события в канал. 
// Горутина читает из канала и обновляет счётчики с `mutex`.


// Задание 16
// Переделай `Counter` так, чтобы был интерфейс `Incrementer`, 
// и структура реализовывала его. Покрой `mutex`.


// Задание 17
// Создай глобальный кэш с `map[string]string`. 
// Запросы к нему идут через API-горутину. Используй `mutex` + `RWMutex`.


// Задание 18
// Выполни `LoadData()` из файла в общий `map[string]int` — параллельно 
// запускается 3 горутины. Используй `mutex`.


// Задание 19
// Передай `context.Context` в обработчик, который обрабатывает 
// данные из канала. `ctx.Done()` завершает цикл, `mutex` защищает счётчики.


// Задание 20
// Реализуй `SafeQueue` — структура с `[]string` и `mutex`. 
// Методы `Enqueue()` и `Dequeue()`, защищённые `Lock()`.


