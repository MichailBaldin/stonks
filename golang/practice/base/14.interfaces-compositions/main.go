package main

// Задание 1: Объединение интерфейсов
// Условие:
// Создай два интерфейса: `Alerter` с `Alert()`, `Logger` с `Log(string)`.
// Создай `Monitor`, который объединяет их.


// Задание 2: Реализация составного интерфейса
// Условие:
// Создай тип `SystemNotifier`, реализующий и `Alert()` и `Log()`.
// Проверь, что он реализует `Monitor`.


// Задание 3: Использование `Monitor` как параметра
// Условие:
// Создай функцию `Check(m Monitor)` и вызови оба метода.
// Передай туда `SystemNotifier`.


// Задание 4: Маленькие интерфейсы
// Условие:
// Создай интерфейс `Stoppable` с методом `Stop()`.
// Создай `Startable`, `Resettable`.
// Создай `Controllable`, объединяющий все три.


// Задание 5: Поддержка частичной реализации
// Условие:
// Создай тип `LightSwitch`, реализующий только `Startable` 
// и `Stoppable`, но не `Resettable`.
// Проверь, реализует ли он `Controllable`.
// (*Ожидается: нет, так как `Resettable` отсутствует*)


// Задание 6: Проверка через `var _` с композиционным интерфейсом
// Условие:
// Напиши:
// var _ Controllable = (*LightSwitch)(nil)
// Проверь: если один метод не реализован — будет ошибка компиляции.


// Задание 7: Интерфейс поверх io.Reader/io.Writer
// Условие:
// Создай интерфейс `ReadWriter` из `io.Reader` и `io.Writer`
// Создай структуру `FileMock`, реализующую оба метода.


// Задание 8: Инъекция поведения через интерфейс
// Условие:
// Создай `Processor`, принимающий `Encoder` и `Decoder`.
// Создай `JSONCodec`, реализующий оба интерфейса.


// Задание 9: Срез интерфейсов с разными реализациями
// Условие:
// Создай срез `[]Logger`, содержащий `ConsoleLogger`, `FileLogger`, `SilentLogger`.
// Вызови `Log()` у каждого в цикле.


// Задание 10: Использование вложенного интерфейса
// Условие:
// Создай интерфейс `Storage` с `Writer`, `Reader`, `Closer`.
// Передай `os.File` как реализацию — он удовлетворяет всем трём.

