package main

// Задание 1
// Создай программу, которая завершает выполнение по нажатию `Ctrl+C`, выводя `"Received interrupt"`.


// Задание 2
// Сделай `context.WithCancel()`, активируй `cancel()` по сигналу `SIGINT` через `signal.Notify`.


// Задание 3
// Создай воркер с циклом `for { select { case <-ctx.Done(): ... } }`, завершающийся при `cancel()`.


// Задание 4
// Добавь `sync.WaitGroup`, чтобы дождаться завершения всех воркеров перед `main()`.


// Задание 5
// Сделай 3 параллельных воркера, каждый работает 1 секунду и завершает работу по `ctx.Done()`.


// Задание 6
// Передай `ctx` в каждую горутину. По завершении — воркер должен печатать `"Worker N exited"`.


// Задание 7
// Добавь `defer cancel()` после `context.WithCancel()` и объясни, зачем он нужен.


// Задание 8
// Сделай чтение из `os.Stdin` и `ctx.Done()` через `select`. При `cancel` — выйти из обработки ввода.


// Задание 9
// Создай горутину, которая слушает канал задач. При отмене — корректно выходит и закрывает канал.


// Задание 10
// Имплементируй shutdown-сценарий: при получении сигнала `SIGTERM` — остановить тикер и завершить работу.


// Задание 11
// Сделай `producer → processor → logger` цепочку. Все они должны завершиться при `ctx.Done()`.


// Задание 12
// Создай таймер, запускающий задачу. Если до этого был `cancel()`, таймер не должен сработать.


// Задание 13
// Реализуй систему опроса базы: каждый 1s проверяет данные. При `ctx.Done()` — завершает цикл и закрывает соединение.


// Задание 14
// Имплементируй воркер с каналом `jobChan`, который перестаёт читать и выходит при отмене контекста.


// Задание 15
// Создай `main()` с `select` между `ctx.Done()` и `time.After(10s)`: если нажать Ctrl+C — выход до истечения времени.


// Задание 16
// Модифицируй shutdown: при получении сигнала подожди 2 секунды перед выходом (`grace period`).


// Задание 17
// Сделай shutdown через `sync.Once`, чтобы `cancel()` вызвался только один раз — даже при множественных сигналах.


// Задание 18
// Создай сервер на `net/http`, передай `ctx` в `ListenAndServe`, корректно заверши его по сигналу.


// Задание 19
// Создай логгер, который пишет в файл. При `ctx.Done()` — вызывается `file.Close()`.


// Задание 20
// Имплементируй shutdown-паттерн с контролем ошибок: если воркер выходит с ошибкой — логируй, но заверши корректно.

