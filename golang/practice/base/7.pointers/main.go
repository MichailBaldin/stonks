package main

// Задание 1: Базовый указатель
// Условие:
// Создай переменную `x := 10`
// Получи её адрес в `p`, увеличь значение по указателю на 5.
// Выведи `x`.

// Задание 2: Передача по значению vs по указателю
// Условие:
// Напиши две функции:
// func byValue(x int)
// func byPointer(x *int)
// Проверь, какая из них меняет исходную переменную `x := 7`.

// Задание 3: Разыменование nil-указателя
// Условие:
// Создай `var p *int`, не инициализируй.
// Попробуй разыменовать `*p` и посмотри на поведение.
// **Ожидается:**
// Паника (`runtime error: invalid memory address or nil pointer dereference`)

// Задание 4: Функция с `*string`
// Условие:
// Создай функцию `func updateName(s *string)`, которая меняет значение строки на `"Updated"`
// Проверь её с переменной `name := "Original"`

// Задание 5: `new()` и разыменование
// Условие:
// Создай указатель на `int` с помощью `new(int)`
// Присвой ему значение 42 и выведи его.

// Задание 6: Указатель на структуру
// Условие:
// Создай структуру `User{Name string}`
// Создай функцию `rename(u *User)`, которая меняет имя.
// Вызови её с `&user`.

// Задание 7: Метод с указателем
// Условие:
// У структуры `User` создай метод `SetName(name string)` с указателем `func (u *User) SetName(name string)`
// Проверь, что изменение сохраняется.

// Задание 8: Возврат указателя из функции
// Условие:
// Напиши функцию `func makePointer() *int`, которая создаёт переменную внутри и возвращает её указатель.
// Важно:
// Объясни, почему это безопасно в Go.

// Задание 9: Указатель на указатель
// Условие:
// Создай:
// x := 5
// p := &x
// pp := &p
// Измени `x` через `**pp = 100`
// Выведи `x`.
// **Ожидаемый вывод:**
// `100`

// Задание 10: Функция с `**int`
// Условие:
// Напиши функцию `func setViaDoublePointer(pp **int)`, которая устанавливает значение по адресу `*pp` в `999`.
// Подсказка:
// func setViaDoublePointer(pp **int) {
//     **pp = 999
// }

// В `main()`:
// x := 0
// p := &x
// setViaDoublePointer(&p)
// fmt.Println(x) // 999
