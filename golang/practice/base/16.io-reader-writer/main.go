package main

// Задание 1
// Открой файл "input.txt" для чтения. Получи `io.Reader`.

// Задание 2
// Создай `bufio.Reader` поверх `os.Stdin`.

// Задание 3
// Прочитай одну строку из `bufio.Reader` (до символа `\n`).

// Задание 4
// Прочитай все байты из `io.Reader` в переменную `[]byte`.

// Задание 5
// Создай файл "output.txt" и получи `io.Writer`.

// Задание 6
// Оберни `io.Writer` в `bufio.Writer`, запиши туда строку `"hello"` и сбрось буфер.

// Задание 7
// Создай `bytes.Buffer` и запиши в него строку `"cached"`.

// Задание 8
// Создай `io.Reader` из строки `"hello world"`.

// Задание 9
// Используй `io.Copy`, чтобы скопировать данные из `os.Stdin` в `os.Stdout`.

// Задание 10
// Прочитай файл "data.txt" целиком в переменную `[]byte` с помощью одной функции.

// Задание 11
// Создай `bufio.Scanner` поверх `os.Stdin`. Читай и выводи строки в цикле, пока есть ввод.

// Задание 12
// Ограничь размер сканируемой строки до 100 байт с помощью `bufio.Scanner.Buffer(...)`.

// Задание 13
// Считай файл "input.txt" построчно с помощью `bufio.Scanner`.

// Задание 14
// Используй `bufio.Reader.ReadByte()` для чтения одного байта из stdin.

// Задание 15
// Используй `bufio.Writer.WriteByte()` для записи одного байта в stdout и вызови `Flush()`.

// Задание 16
// Создай `strings.NewReader("abc")` и прочитай из него 2 байта в слайс.

// Задание 17
// Создай кастомный тип `MyReader`, который всегда возвращает 'A' при чтении. Реализуй `Read(p []byte) (int, error)`.

// Задание 18
// Создай кастомный тип `MyWriter`, который при `Write(p []byte)` выводит `len(p)` и возвращает `nil`.

// Задание 19
// Прочитай строку `"42\n"` из `strings.NewReader`, оберни в `bufio.Scanner`, вытащи число как строку.

// Задание 20
// Создай `io.TeeReader`, который читает из `os.Stdin` и копирует в `os.Stdout`.

// Задание 21
// Создай `io.Pipe()`. В одной горутине пиши в `Writer`, в другой читай из `Reader`.

// Задание 22
// Оберни `strings.NewReader("abc")` в `io.LimitReader` и считай только 2 байта.

// Задание 23
// Объедини два `strings.Reader` в один поток с помощью `io.MultiReader`.

// Задание 24
// Используй `io.TeeReader`, чтобы читать строку и одновременно писать в `bytes.Buffer`.

// Задание 25
// Используй `ioutil.NopCloser` на `strings.Reader`, чтобы получить `io.ReadCloser`.

// Задание 26
// Преобразуй `[]byte("abc")` в `io.Reader` без использования `strings`.

// Задание 27
// Создай `bytes.Buffer`, запиши `"hi"` и выведи содержимое как строку.

// Задание 28
// Используй `strings.Builder` для построения строки `"Go is great!"`.

// Задание 29
// Сделай `fmt.Fprintf(&builder, ...)`, чтобы записать строку в `strings.Builder`.

// Задание 30
// Создай `bytes.NewBuffer([]byte("xyz"))`, прочитай один байт и выведи оставшееся содержимое.

// 1. Используя `strings.NewReader`, создай `io.Reader` по строке `"hello\n"`
// и выведи её на `os.Stdout` через `io.Copy`.

// 2. Прочитай вручную `[]byte` из `strings.NewReader("abc")` по 2 байта за раз
// и выведи каждый кусок.

// 3. Используя `bytes.Buffer`, создай `Writer`, запиши туда строку `"GoLang"`,
// затем выведи результат.

// 4. Напиши функцию `ToUpperCopy(src io.Reader, dst io.Writer)`,
// которая читает данные, переводит в верхний регистр и записывает.

// 5. Используя `io.TeeReader`, логируй все данные, которые читает
// основной `Reader`, в `bytes.Buffer`.

// 6. Напиши обёртку `CountingReader` — `Reader`, который считает
// общее число прочитанных байт.

// 7. Прочитай первые 10 байт из `strings.NewReader(...)`,
// используя `io.LimitReader`.

// 8. Используя `io.MultiWriter`, запиши одну строку одновременно
// в `os.Stdout` и `bytes.Buffer`.

// 9. Преобразуй содержимое файла `"data.txt"` в верхний регистр
// и запиши в новый файл `"out.txt"` с использованием `Reader`/`Writer`.

// 10. Напиши `type NullWriter struct{}`, который реализует `io.Writer`,
// но отбрасывает всё (аналог `ioutil.Discard`).

// 11. Оберни `os.Stdin` в `bufio.Reader` и считывай строки до EOF.

// 12. Используя `io.Copy`, скопируй содержимое `http.Response.Body`
// в файл (или `bytes.Buffer`).

// 13. Создай структуру `StructLogger`, реализующую `io.Writer`,
// которая логирует каждую запись в `log.Println`.

// 14. Создай `io.Reader`, который всегда возвращает `"ping\n"`,
// независимо от `Read` (ограничь `n`).

// 15. Напиши функцию `LogAllWrites(w io.Writer) io.Writer`,
// которая логирует всё, что в неё пишется.

// 16. Прочитай `N` байт из `Reader`, но вручную по 1 байту,
// используя `Read(buf[:1])`.

// 17. Напиши `type PrefixWriter struct`,
// добавляющий префикс `"OUT: "` ко всем записям.

// 18. Используй `strings.Reader`,
// чтобы сдвинуть позицию чтения с помощью `Seek`.

// 19. Прочитай весь `io.Reader`,
// раздели по строкам и верни `[]string`.

// 20. Используя `io.Pipe`, организуй взаимодействие между
// горутиной-продюсером и горутиной-консьюмером.
