package main

// 1. Счётчик вызовов
// Напиши функцию `makeCounter()`, которая возвращает функцию, 
// увеличивающую внутреннее число при каждом вызове.
// c := makeCounter()
// c() // 1
// c() // 2

// 2. Фиксированное умножение
// Напиши `makeMultiplier(factor int)`, которая возвращает 
// функцию, умножающую число на `factor`.
// double := makeMultiplier(2)
// double(4) // 8

// 3. Фиксация строки
// Создай `makeGreeter(name string)`, возвращающую функцию, 
// которая приветствует пользователя по имени.
// greet := makeGreeter("Alice")
// greet() // Hello, Alice!

// 4. Проверка пароля
// Создай `makePasswordChecker(password string)` — возвращает функцию, 
// проверяющую правильность пароля.
// check := makePasswordChecker("secret")
// check("guess")  // false
// check("secret") // true

// 5. Константный возвращатель
// Функция `makeConstReturner(val int)` должна возвращать 
// функцию, всегда возвращающую `val`.
// ret := makeConstReturner(42)
// ret() // 42

// Уровень 2 — Использование аргументов и контекста (6–10)

// 6. Накопитель суммы
// Сделай `makeAccumulator()`, возвращающую функцию, прибавляющую 
// переданное значение к общей сумме и возвращающую её.
// acc := makeAccumulator()
// acc(5) // 5
// acc(3) // 8

// 7. Кеширующая функция
// Напиши `makeMemoAdd(a, b int) func() int` — возвращает ленивую функцию, 
// считающую сумму один раз и потом всегда возвращающую кэш.

// 8. Генератор чётных чисел
// Сделай `makeEvenGenerator()`, возвращающую следующее чётное число при каждом вызове.
// even := makeEvenGenerator()
// even() // 0
// even() // 2
// even() // 4

// 9. Именованное логгирование
// Сделай `makeLogger(tag string)` — возвращает функцию `func(msg string)`, 
// печатающую: `[tag] msg`.
// logger := makeLogger("DEBUG")
// logger("Start!") // [DEBUG] Start!

// 10. Функция с таймером
// Сделай `makeTimed(func()) func()` — возвращает обёртку, 
// которая выводит время выполнения функции.

// Уровень 3 — Игра с замыканием и циклами (11–15)

// 11. Фиксация переменных цикла
// Создай массив функций `[3]func()`, каждая из которых печатает своё `i`.
// Цель — избежать ошибки замыкания переменной цикла.

// 12. Генератор Фибоначчи
// Сделай `makeFib() func() int`, которая возвращает следующее 
// число Фибоначчи при каждом вызове.
// fib := makeFib()
// fib() // 0
// fib() // 1
// fib() // 1
// fib() // 2

// 13. Захват и проверка лимита
// Сделай `makeLimiter(limit int)` — функция возвращает другую, 
// которая считает вызовы и запрещает вызовы после `limit`.
// next := makeLimiter(2)
// next() // true
// next() // true
// next() // false

// 14. Форматированный вывод
// Сделай `makePrefixer(prefix string)` — возвращает `func(s string)`, 
// которая печатает строку с префиксом.
// warn := makePrefixer("[WARN]")
// warn("disk full") // [WARN] disk full

// 15. Счётчик уникальных значений
// Напиши функцию, возвращающую замыкание, принимающее 
// строку и считающее уникальные вхождения.
// f := makeUniqCounter()
// f("a") // 1
// f("b") // 2
// f("a") // 2

// Уровень 4 — Реальные паттерны (16–20)

// 16. HTTP middleware
// Реализуй `loggingMiddleware(next func()) func()` — возвращающую обёртку, 
// которая логирует до и после выполнения `next`.

// 17. Генератор токенов
// Напиши `makeTokenGenerator(prefix string)`, возвращающую уникальный 
// токен на каждый вызов: `"prefix-1"`, `"prefix-2"`...

// 18. Работа с каналом
// Сделай `makeWriter(ch chan string)` — возвращает функцию, 
// пишущую в канал захваченную строку с префиксом.

// 19. Динамический фильтр
// Создай `makeThresholdFilter(threshold int)`, возвращающий `func(int) bool`.
// Используй его для фильтрации слайса `[]int`.

// 20. Генератор запросов
// Реализуй `makeRequestFunc(endpoint string)` — возвращает 
// функцию `func(params string) string`, которая возвращает сформированный URL.
// r := makeRequestFunc("api/users")
// r("id=1") // api/users?id=1