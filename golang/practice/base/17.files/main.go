package main

// 1. Создай файл `output.txt` и запиши туда строку `"Hello, world!\n"`.


// 2. Прочитай весь файл `input.txt` целиком и выведи его содержимое.


// 3. Прочитай файл `input.txt` построчно и выведи каждую строку с её номером.


// 4. Прочитай первые 10 байт из файла и выведи как строку.


// 5. Открой файл в режиме дозаписи и добавь строку `"Appended line"` в конец.


// 6. Скопируй содержимое файла `a.txt` в `b.txt` через `io.Copy`.


// 7. Удали файл `temp.txt` при наличии.


// 8. Получи размер файла `log.txt` и дату последнего изменения.


// 9. Создай директорию `tmp/logs` (вложенно).


// 10. Прочитай список файлов в текущей директории и выведи только `.go`-файлы.


// 11. Считай все строки из `data.txt`, преобразуй в `[]string`, отсортируй и запиши обратно.


// 12. Прочитай JSON-файл и распарсь его в структуру `User{Name string, Age int}`.


// 13. Запиши массив чисел `[]int{1,2,3}` в бинарный файл с использованием `encoding/binary`.


// 14. Реализуй функцию `WriteLines([]string, filename string)` для записи строк построчно.


// 15. Напиши функцию `CountLines(filename string) int`, возвращающую количество строк в файле.


// 16. Реализуй `CopyIfExists(src, dst string)` — копирует файл, если `src` существует.


// 17. Запиши 1000 строк в файл, используя `bufio.Writer` (не `WriteString` напрямую).


// 18. Прочитай файл `data.csv` и построй map\[int]string, где ключ — ID, значение — имя.


// 19. Сравни два файла по содержимому и выведи, совпадают ли они.


// 20. Сериализуй структуру `User` в JSON и запиши в файл `user.json`.


// 21. Прочитай файл как `[]byte`, замени `"cat"` на `"dog"` и запиши обратно.


// 22. Прочитай файл с руннами и подсчитай количество уникальных символов.


// 23. Реализуй `Tail(filename string, n int)` — возвращает последние `n` строк из файла.


// 24. Создай лог-файл, в который параллельно пишут несколько горутин (с мьютексом).


// 25. Используй `io.TeeReader` для записи всего читаемого в лог-файл.


// 26. Используй `io.LimitReader` для чтения первых 100 байт из файла.


// 27. Запиши результаты из нескольких `[]string` в файл, используя `strings.Join`.


// 28. Напиши `IsTextFile(path string) bool`, проверяющую, содержит ли файл только печатные символы.


// 29. Используя `os.ReadDir`, собери структуру `[]FileInfo` с путями и размерами всех файлов в папке.


// 30. Преобразуй содержимое большого файла в верхний регистр, используя потоковое чтение и `strings.ToUpper`.

