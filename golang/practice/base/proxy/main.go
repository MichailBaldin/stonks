package main

// 1. Интерфейс `Worker.Do()` и структура `RealWorker` с `Do()`, печатающая `Working`.
//    Создай прокси, который логирует `"Start"` перед и `"End"` после вызова.

// 2. Интерфейс `Calculator.Add(x, y int) int`.
//    Прокси считает, сколько раз вызывали `Add` (печатает счётчик).

// 3. Интерфейс `Fetcher.Fetch() string`, реальный тип возвращает `"data"`.
//    Прокси кэширует результат и возвращает тот же `"data"` без вызова после первого.

// 4. Интерфейс `Messenger.Send(to, msg string)`, реализация печатает `Sent to {to}: {msg}`.
//    Прокси проверяет, чтобы `to != ""`, иначе печатает `Invalid recipient`.

// 5. Интерфейс `Storage.Save(key, value string)`.
//    Прокси запрещает сохранение пустого ключа (`key == ""`), иначе вызывает реальный.

// 6. Интерфейс `Math.Mul(a, b int) int`.
//    Прокси логирует аргументы и результат.

// 7. Интерфейс `Greeter.Greet(name string) string`, реальный возвращает `"Hello, {name}"`.
//    Прокси добавляет `" [proxied]"` к результату.

// 8. Интерфейс `Op.Execute() error`, реализация возвращает `nil`.
//    Прокси печатает `"Executing"` перед вызовом.

// 9. Интерфейс `UserRepo.GetByID(id int) string`.
//    Прокси добавляет `"Cache miss"` при первом вызове и кэширует результат.

// 10. Интерфейс `FileReader.Read() string`, реализация возвращает `"file content"`.
//     Прокси проверяет, открыт ли файл, иначе возвращает `"error: closed"`.

// 11. Интерфейс `Clock.Now() string` (возвращает время).
//     Прокси округляет до минут (обрезает секунды).

// 12. Интерфейс `EmailSender.Send(email string) bool`.
//     Прокси добавляет проверку `strings.Contains(email, "@")`.

// 13. Интерфейс `Service.Run()`.
//     Прокси вызывает `Run()` только один раз, остальные игнорирует.

// 14. Интерфейс `Parser.Parse(s string) (int, error)` (возвращает длину строки).
//     Прокси логирует входной текст.

// 15. Интерфейс `API.Call(endpoint string) string`.
//     Прокси добавляет префикс `"/api"` ко всем endpoint'ам.

// 16. Интерфейс `Logger.Log(msg string)`.
//     Прокси дублирует вызов в stdout и stderr.

// 17. Интерфейс `Saver.Store(k, v string)`.
//     Прокси сохраняет только если `len(v) <= 10`, иначе выводит `"too long"`.

// 18. Интерфейс `Image.Draw() string` возвращает `"drawing image"`.
//     Прокси заменяет `"image"` на `"cached image"` при втором вызове.

// 19. Интерфейс `Uploader.Upload(filename string)`.
//     Прокси запрещает `.exe` файлы — выводит `"blocked"`.

// 20. Интерфейс `Ping.Ping() bool` возвращает `true`.
//     Прокси делает 3 вызова подряд и печатает их суммарный результат: `true true true`.

