package main

// 1. Используй `strings.NewReader("abc")` как `io.Reader`,
// прочитай весь контент в `[]byte` через `Read`.


// 2. Создай `bytes.Buffer`, используй как `io.Writer`, запиши туда строку `"xyz"`,
// затем выведи `.String()`.


// 3. Создай свою структуру `type MyWriter struct{}`, реализуй метод `Write(p []byte)`,
// который выводит длину входных данных.


// 4. Создай свою структуру `type MyReader struct{}`, реализуй метод `Read(p []byte)`,
// который всегда возвращает букву `'A'`.


// 5. Используй `io.TeeReader` с `strings.NewReader("debug")` и `bytes.Buffer`,
// прочитай всё и выведи содержимое буфера.


// 6. Используй `io.LimitReader`, чтобы читать только первые 3 байта
// из `strings.NewReader("abcdef")`, выведи результат.


// 7. Используй `io.MultiReader`, чтобы объединить `"foo"` и `"bar"`,
// выведи склеенный результат.


// 8. Используй `io.MultiWriter`, чтобы записать строку `"abc"` одновременно
// в два `bytes.Buffer`, выведи содержимое обоих.


// 9. Используй `io.Copy` для копирования данных из одного `Reader`
// в `Writer` (например, из `strings.Reader` в `bytes.Buffer`).


// 10. Используй `io.CopyN`, чтобы скопировать 4 байта из `strings.NewReader("ABCDEFG")`
// в `bytes.Buffer`.


// 11. Используй `io.CopyBuffer`, но передай буфер на 2 байта,
// покажи, как это влияет на процесс чтения.


// 12. Используй `io.ReadFull` для чтения ровно 5 байт из `strings.NewReader("hello world")`,
// покажи результат и возможную ошибку, если данных меньше.


// 13. Используй `io.ReadAtLeast`, чтобы попытаться прочитать хотя бы 6 байт
// из `strings.NewReader("123456")` в буфер на 10 байт.


// 14. Используй `io.NopCloser` для оборачивания `io.Reader`, у которого нет метода `Close()`,
// вызови `Close()` и проверь, что он ничего не делает.


// 15. Создай свою структуру `PrefixWriter`, которая реализует `io.Writer`
// и добавляет префикс `"-> "` ко всем записям. Проверь с `io.Copy`.


// 16. Создай `InfiniteReader`, который бесконечно отдаёт `Z` — реализуй `Read(p []byte)`,
// и прочитай первые 16 байт.


// 17. Создай свою структуру `LimitWriter`, которая записывает только первые N байт,
// всё остальное игнорирует. Проверь поведение.


// 18. Используй `io.SectionReader` для чтения 4 байт начиная с offset 2
// из `bytes.NewReader([]byte("01234567"))`.


// 19. Используй `io.Pipe` и сделай двустороннюю передачу:
// в одной горутине записывай, в другой читай и выводи результат.


// 20. Напиши свою функцию `func UpperReader(r io.Reader) io.Reader`, которая оборачивает
// другой `Reader` и возвращает все данные в верхнем регистре.
