package main

// Задание 1: Вывод имени типа
// Условие:
// Создай функцию `PrintTypeName(x any)`, которая выводит `reflect.TypeOf(x).Name()`.


// Задание 2: Определение `Kind`
// Условие:
// Функция `PrintKind(x any)` должна выводить `reflect.TypeOf(x).Kind()`.


// Задание 3: Печать значения переменной
// Условие:
// Используй `reflect.ValueOf(x).Interface()` и напечатай его.


// Задание 4: Проверка, является ли значение int
// Условие:
// Проверь: `reflect.TypeOf(x).Kind() == reflect.Int`


// Задание 5: Извлечение значения `int` через `.Int()`
// Условие:
// Создай `x := 42`, получи `reflect.ValueOf(x).Int()` и напечатай.


// Задание 6: Получение значений всех полей структуры
// Условие:
// Дана структура `User{Name string, Age int}`. Перебери `reflect.ValueOf(user).Field(i).Interface()` и выведи.


// Задание 7: Получение имён всех полей структуры
// Условие:
// Через `reflect.TypeOf(user).Field(i).Name`.


// Задание 8: Проверка, является ли значение структурой
// Условие:
// Проверь `reflect.TypeOf(x).Kind() == reflect.Struct`.


// Задание 9: Печать всех пар: имя поля — значение
// Условие:
// Итерируй и напечатай:
// Имя: t.Field(i).Name
// Значение: v.Field(i).Interface()


// Задание 10: Работа с указателем
// Условие:
// Создай `x := 10`, передай в функцию `SetTo42(x *int)`, внутри используй `.Elem().SetInt(42)`.


// Задание 11: Печать типа переменной по значению
// Условие:
// Функция `PrintFullType(x any)` должна выводить:
// Тип: t.String()
// Kind: t.Kind()


// Задание 12: Проверка, является ли значение указателем
// Условие:
// Проверь `reflect.TypeOf(x).Kind() == reflect.Ptr`.


// Задание 13: Сравнение значений по `reflect.Value`
// Условие:
// Создай `v1 := reflect.ValueOf(10)`, `v2 := reflect.ValueOf(10)`
// Сравни `v1.Interface() == v2.Interface()`.


// Задание 14: Обход среза через reflection
// Условие:
// Прими `x any`, проверь что `Kind() == Slice`, выведи все элементы через `.Index(i).Interface()`.


// Задание 15: Получение длины среза
// Условие:
// Выведи `reflect.ValueOf(slice).Len()`.


// Задание 16: Вызов метода по имени
// Условие:
// Создай структуру с методом `Greet()`. Через `.MethodByName("Greet").Call(nil)` вызови его.


// Задание 17: Получение тега поля
// Условие:
// Дана структура с тегом: ``Name string `json:"name"` ``
// Выведи `t.Field(i).Tag.Get("json")`.


// Задание 18: Преобразование `interface{}` обратно в `int`
// Условие:
// Используй `v := reflect.ValueOf(10)`, затем `val := v.Interface().(int)`.


// Задание 19: Проверка, можно ли изменить значение
// Условие:
// Проверь `v.CanSet()` перед `v.SetInt(...)`.


// Задание 20: Обработка любого значения с выводом всего
// Условие:
// Функция `PrintAnything(x any)` должна:
// * Печатать имя и kind
// * Если структура — печатать поля
// * Если срез — печатать элементы
// * Иначе — просто `.Interface()`

