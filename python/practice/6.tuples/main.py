# python/practice/day3/2.tuples/main.py

# 1. Создай кортеж из 4 элементов и выведи его тип.

# 2. Попробуй изменить элемент кортежа. Что происходит?

# 3. Создай кортеж с одним элементом (обрати внимание на запятую).

# 4. Получи элемент кортежа по индексу и через срезы.

# 5. Распакуй кортеж в отдельные переменные.

# 6. Создай кортеж координат (x, y) и напиши функцию для расчёта расстояния.

# 7. Объедини два кортежа через +.

# 8. Найди индекс элемента в кортеже через index().

# 9. Посчитай количество определённых элементов через count().

# 10. Создай функцию, которая возвращает кортеж (min, max) из списка.

# 11. Преобразуй список в кортеж и обратно.

# 12. Создай кортеж кортежей (вложенная структура).

# 13. Отсортируй список кортежей по первому элементу.

# 14. Создай именованный кортеж через collections.namedtuple.

# 15. Используй кортеж как ключ словаря.

# 16. Сравни скорость создания списка и кортежа.

# 17. Создай функцию, которая принимает *args и возвращает кортеж.

# 18. Найди максимальный кортеж в списке кортежей.

# 19. Создай кортеж из строки и посмотри на результат.

# 20. Используй кортеж для множественного присваивания.

# 21. Проверь, содержится ли элемент в кортеже.

# 22. Создай функцию для обмена значений через кортеж.

# 23. Найди общие элементы в двух кортежах.

# 24. Создай кортеж из range() и выведи его.

# 25. Используй кортеж в цикле for с enumerate().

# 26. Создай кортеж из различных типов данных.

# 27. Сделай кортеж из результата функции zip().

# 28. Проверь, упорядочен ли кортеж по возрастанию.

# 29. Создай функцию, которая возвращает статистику (среднее, медиана) кортежем.

# 30. Используй кортеж для хранения конфигурационных данных.